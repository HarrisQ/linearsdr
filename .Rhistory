ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
b_hat_save_reg = save_sdr(x=X, y=Y, nslices = 5, d=2, ytype = "continuous",
lambda = .0015)$beta
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save_reg[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
b_hat_save_reg = save_sdr(x=X, y=Y, nslices = 5, d=2, ytype = "continuous",
lambda = .0001)$beta
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save_reg[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
b_hat_save_reg = save_sdr(x=X, y=Y, nslices = 5, d=2, ytype = "continuous",
lambda = .1)$beta
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save_reg[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
par(mar=c(1, 0, 0, 1), mfrow=c(1,2))
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save_reg[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save_reg[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
```{r,  fig.show="hold", out.width="50%"}
b_hat_save = save_sdr(x=X, y=Y, nslices = 10, d=2, ytype = "continuous",
lambda = 0)$beta
b_hat_save_reg = save_sdr(x=X, y=Y, nslices = 5, d=2, ytype = "continuous",
lambda = .1)$beta
par(mar=c(1, 0, 0, 1), mfrow=c(1,2))
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save_reg[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save_reg[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
```{r, figures-side, fig.show="hold", out.width="50%"}
b_hat_save = save_sdr(x=X, y=Y, nslices = 10, d=2, ytype = "continuous",
lambda = 0)$beta
b_hat_save_reg = save_sdr(x=X, y=Y, nslices = 5, d=2, ytype = "continuous",
lambda = .1)$beta
par(mar=c(1, 0, 0, 1), mfrow=c(1,2))
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save_reg[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
# Sliced Average Variance Estimator
b_hat_save = save_sdr(x=X, y=Y, nslices = 10, d=2, ytype = "continuous",
lambda = 0)$beta
b_hat_save_reg = save_sdr(x=X, y=Y, nslices = 5, d=2, ytype = "continuous",
lambda = .1)$beta
par(mar=c(1, 0, 0, 1), mfrow=c(1,2))
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save_reg[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
# Sliced Average Variance Estimator
b_hat_save = save_sdr(x=X, y=Y, nslices = 10, d=2, ytype = "continuous",
lambda = 0)$beta
b_hat_save_reg = save_sdr(x=X, y=Y, nslices = 5, d=2, ytype = "continuous",
lambda = .1)$beta
par(mar=c(1, 0, 0, 1), mfrow=c(1,2))
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save_reg[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
# Sliced Average Variance Estimator
b_hat_save = save_sdr(x=X, y=Y, nslices = 10, d=2, ytype = "continuous",
lambda = 0)$beta
b_hat_save_reg = save_sdr(x=X, y=Y, nslices = 5, d=2, ytype = "continuous",
lambda = .1)$beta
par(mar = c(4, 4, .1, .1))
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save_reg[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
# Sliced Average Variance Estimator
b_hat_save = save_sdr(x=X, y=Y, nslices = 10, d=2, ytype = "continuous",
lambda = 0)$beta
b_hat_save_reg = save_sdr(x=X, y=Y, nslices = 5, d=2, ytype = "continuous",
lambda = .1)$beta
par(mar=c(1, 0, 0, 1), mfrow=c(1,1))
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save_reg[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('Regularized SAVE'), size=2)
# Sliced Average Variance Estimator
b_hat_save = save_sdr(x=X, y=Y, nslices = 10, d=2, ytype = "continuous",
lambda = 0)$beta
b_hat_save_reg = save_sdr(x=X, y=Y, nslices = 5, d=2, ytype = "continuous",
lambda = .1)$beta
par(mar=c(1, 0, 0, 1), mfrow=c(1,1))
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save_reg[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('Regularized SAVE'), size=2)
# Sliced Average Variance Estimator
b_hat_save = save_sdr(x=X, y=Y, nslices = 10, d=2, ytype = "continuous",
lambda = 0)$beta
b_hat_save_reg = save_sdr(x=X, y=Y, nslices = 5, d=2, ytype = "continuous",
lambda = .1)$beta
par(mar=c(1, 0, 0, 1), mfrow=c(1,1))
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save_reg[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('Regularized SAVE'), size=2)
save_plot=linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
reg_save_plot=linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save_reg[,1]),
y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('Regularized SAVE'),
size=2)
save_plot; reg_save_plot;
par(mar=c(1, 0, 0, 1), mfrow=c(1,1))
save_plot; reg_save_plot;
as_ggplot(do.call("grid.arrange", c(list(save_plot, reg_save_plot), ncol=2)))
ggpubr::as_ggplot(do.call("grid.arrange", c(list(save_plot, reg_save_plot), ncol=2)))
library(ggpubr)
library(gridExtra)
as_ggplot(do.call("grid.arrange", c(list(save_plot, reg_save_plot), ncol=2)))
# Sliced Average Variance Estimator
b_hat_save = save_sdr(x=X, y=Y, nslices = 10, d=2, ytype = "continuous",
lambda = 0)$beta
b_hat_save_reg = save_sdr(x=X, y=Y, nslices = 5, d=2, ytype = "continuous",
lambda = .1)$beta
par(mar=c(1, 0, 0, 1), mfrow=c(1,1))
save_plot=linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
reg_save_plot=linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save_reg[,1]),
y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('Regularized SAVE'),
size=2)
as_ggplot(do.call("grid.arrange", c(list(save_plot, reg_save_plot), ncol=2)))
save_plot; reg_save_plot;
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(ggplot2)
library(ggpubr)
library(gridExtra)
library(linearsdr)
data('supercond_datta', package="linearsdr")
dim(supercond_datta)
X = supercond_datta[1:500, 1:81]
Y = supercond_datta[1:500, 82]
# Sliced Inverse Regression
b_hat_sir = sir(x=X, y=Y, nslices = 10, d=2, ytype = "continuous",
lambda = 0)$beta
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_sir[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SIR 1', v_lab='Y',
main_lab= paste0('SIR'), size=2)
# Sliced Average Variance Estimator
b_hat_save = save_sdr(x=X, y=Y, nslices = 10, d=2, ytype = "continuous",
lambda = 0)$beta
b_hat_save_reg = save_sdr(x=X, y=Y, nslices = 5, d=2, ytype = "continuous",
lambda = .1)$beta
par(mar=c(1, 0, 0, 1), mfrow=c(1,1))
save_plot=linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
reg_save_plot=linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save_reg[,1]),
y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('Regularized SAVE'),
size=2)
as_ggplot(do.call("grid.arrange", c(list(save_plot, reg_save_plot), ncol=2)))
save_plot; reg_save_plot;
# Sliced Average Variance Estimator
b_hat_save = save_sdr(x=X, y=Y, nslices = 10, d=2, ytype = "continuous",
lambda = 0)$beta
b_hat_save_reg = save_sdr(x=X, y=Y, nslices = 5, d=2, ytype = "continuous",
lambda = .1)$beta
par(mar=c(1, 0, 0, 1), mfrow=c(1,1))
save_plot=linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
reg_save_plot=linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save_reg[,1]),
y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('Regularized SAVE'),
size=2)
as_ggplot(do.call("grid.arrange", c(list(save_plot, reg_save_plot), ncol=2)))
save_plot; reg_save_plot;
# Sliced Average Variance Estimator
b_hat_save = save_sdr(x=X, y=Y, nslices = 10, d=2, ytype = "continuous",
lambda = 0)$beta
b_hat_save_reg = save_sdr(x=X, y=Y, nslices = 5, d=2, ytype = "continuous",
lambda = .1)$beta
par(mar=c(1, 0, 0, 1), mfrow=c(1,1))
save_plot=linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
reg_save_plot=linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save_reg[,1]),
y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('Regularized SAVE'),
size=2)
as_ggplot(do.call("grid.arrange", c(list(save_plot, reg_save_plot), ncol=2)))
save_plot; reg_save_plot;
# Sliced Average Variance Estimator
b_hat_save = save_sdr(x=X, y=Y, nslices = 10, d=2, ytype = "continuous",
lambda = 0)$beta
b_hat_save_reg = save_sdr(x=X, y=Y, nslices = 5, d=2, ytype = "continuous",
lambda = .1)$beta
par(mar=c(1, 0, 0, 1), mfrow=c(1,1))
save_plot=linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
reg_save_plot=linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save_reg[,1]),
y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('Regularized SAVE'),
size=2)
as_ggplot(do.call("grid.arrange", c(list(save_plot, reg_save_plot), ncol=2)))
save_plot; reg_save_plot;
# Sliced Average Variance Estimator
b_hat_save = save_sdr(x=X, y=Y, nslices = 10, d=2, ytype = "continuous",
lambda = 0)$beta
b_hat_save_reg = save_sdr(x=X, y=Y, nslices = 5, d=2, ytype = "continuous",
lambda = .1)$beta
par(mar=c(1, 0, 0, 1), mfrow=c(1,1))
save_plot=linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
reg_save_plot=linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save_reg[,1]),
y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('Regularized SAVE'),
size=2)
as_ggplot(do.call("grid.arrange", c(list(save_plot, reg_save_plot), ncol=2)))
# save_plot; reg_save_plot;
as_ggplot(do.call("grid.arrange", c(list(save_plot, reg_save_plot), nrow=1, ncol=2)))
# Sliced Average Variance Estimator
b_hat_save = save_sdr(x=X, y=Y, nslices = 10, d=2, ytype = "continuous",
lambda = 0)$beta
b_hat_save_reg = save_sdr(x=X, y=Y, nslices = 5, d=2, ytype = "continuous",
lambda = .1)$beta
par(mar=c(1, 0, 0, 1), mfrow=c(1,1))
save_plot=linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
reg_save_plot=linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save_reg[,1]),
y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('Regularized SAVE'),
size=2)
as_ggplot(do.call("grid.arrange", c(list(save_plot, reg_save_plot), nrow=1, ncol=2)))
# save_plot; reg_save_plot;
save_plot
reg_save_plot
b_hat_save_reg = save_sdr(x=X, y=Y, nslices = 10, d=2, ytype = "continuous",
lambda = .1)$beta
par(mar=c(1, 0, 0, 1), mfrow=c(1,1))
save_plot=linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
reg_save_plot=linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save_reg[,1]),
y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('Regularized SAVE'),
size=2)
as_ggplot(do.call("grid.arrange", c(list(save_plot, reg_save_plot), nrow=1, ncol=2)))
# Sliced Average Variance Estimator
b_hat_save = save_sdr(x=X, y=Y, nslices = 10, d=2, ytype = "continuous",
lambda = 0)$beta
b_hat_save_reg = save_sdr(x=X, y=Y, nslices = 10, d=2, ytype = "continuous",
lambda = .1)$beta
par(mar=c(1, 0, 0, 1), mfrow=c(1,1))
save_plot=linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
reg_save_plot=linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save_reg[,1]),
y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('Regularized SAVE'),
size=2)
as_ggplot(do.call("grid.arrange", c(list(save_plot, reg_save_plot), nrow=1, ncol=2)))
# save_plot; reg_save_plot;
# Sliced Average Variance Estimator
b_hat_save = save_sdr(x=X, y=Y, nslices = 10, d=2, ytype = "continuous",
lambda = 0)$beta
b_hat_save_reg = save_sdr(x=X, y=Y, nslices = 10, d=2, ytype = "continuous",
lambda = .1)$beta
save_plot=linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('SAVE'), size=2)
reg_save_plot=linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save_reg[,1]),
y_on_axis=T,
ytype="continuous",
h_lab='SAVE 1', v_lab='Y',
main_lab= paste0('Regularized SAVE'),
size=2)
as_ggplot(do.call("grid.arrange", c(list(save_plot, reg_save_plot), nrow=1, ncol=2)))
# save_plot; reg_save_plot;
roxygen2::roxygenise()
roxygen2::roxygenise()
pkgdown::build_site()
library(ggplot2)
library(ggplot2)
library(linearsdr)
data('airfoil_datta', package="linearsdr")
summary(airfoil_datta)
X = as.matrix(airfoil_datta[,1:5])
Y = c(airfoil_datta[,6])
pairs(X)
library(ggplot2)
library(linearsdr)
data('airfoil_datta', package="linearsdr")
# summary(airfoil_datta)
X = as.matrix(airfoil_datta[,1:5])
Y = c(airfoil_datta[,6])
pairs(X)
b_hat_sir = sir(x=X, y=Y, nslices = 5, d=2, ytype = "continuous" )$beta
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_sir[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SIR 1', v_lab='Y',
main_lab= paste0('SIR'), size=2.5)
```{r}
b_hat_save = save_sdr(x=X, y=Y, nslices = 5, d=2, ytype = "continuous" )$beta
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save[,1]), y_on_axis=T,
ytype="continuous",
h_lab='DR 1', v_lab='Y',
main_lab= paste0('DR'), size=2.5)
# Directional Regression
b_hat_dr = dr(x=X, y=Y, nslices = 5, d=2, ytype = "continuous" )$beta
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_dr[,1]), y_on_axis=T,
ytype="continuous",
h_lab='DR 1', v_lab='Y',
main_lab= paste0('DR'), size=2.5)
# OPG Estimate
library("doParallel")
library("foreach")
print( paste( as.character(detectCores()), "cores detected" ) );
# Create cluster with desired number of cores
if ( !grepl("hxq5", getwd()) ) {
cl <- makePSOCKcluster(detectCores()-1)
} else if ( grepl("hxq5", getwd()) ) {
cl <- parallel::makeCluster(nprocs, type=mp_type)
}
# Register cluster
doParallel::registerDoParallel(cl)
# Find out how many cores are being used
print( paste( as.character(getDoParWorkers() ), "cores registered" ) )
# stopCluster(cl)
X_std=(sapply(1:dim(X)[2], FUN= function(j)
center_cpp(X[,j], NULL) ) )%*%matpower_cpp(cov((X)) , -1/2);
b_hat_opg = opcg(x=X_std, y=Y, bw = 5, d=2, ytype = "continuous",
method= "cg", parallelize = T )
linearsdr:::ggplot_fsdr(Y, t((X_std)%*%b_hat_opg[,1]), y_on_axis=T,
ytype="continuous",
h_lab='OPG 1', v_lab='OPG 2',
main_lab= paste0('OPG'), size=2.5)
library(ggplot2)
library(linearsdr)
data('airfoil_datta', package="linearsdr")
# summary(airfoil_datta)
X = as.matrix(airfoil_datta[,1:5])
Y = c(airfoil_datta[,6])
pairs(X)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>"
)
library(ggplot2)
library(linearsdr)
data('airfoil_datta', package="linearsdr")
# summary(airfoil_datta)
X = as.matrix(airfoil_datta[,1:5])
Y = c(airfoil_datta[,6])
pairs(X)
# Sliced Inverse Regression
b_hat_sir = sir(x=X, y=Y, nslices = 5, d=2, ytype = "continuous" )$beta
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_sir[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SIR 1', v_lab='Y',
main_lab= paste0('SIR'), size=2.5)
# Sliced Average Variance Estimator
b_hat_save = save_sdr(x=X, y=Y, nslices = 5, d=2, ytype = "continuous" )$beta
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save[,1]), y_on_axis=T,
ytype="continuous",
h_lab='DR 1', v_lab='Y',
main_lab= paste0('DR'), size=2.5)
# Sliced Average Variance Estimator
b_hat_save = save_sdr(x=X, y=Y, nslices = 5, d=2, ytype = "continuous" )$beta
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_save[,1]), y_on_axis=T,
ytype="continuous",
h_lab='DR 1', v_lab='Y',
main_lab= paste0('DR'), size=2.5)
# Directional Regression
b_hat_dr = dr(x=X, y=Y, nslices = 5, d=2, ytype = "continuous" )$beta
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_dr[,1]), y_on_axis=T,
ytype="continuous",
h_lab='DR 1', v_lab='Y',
main_lab= paste0('DR'), size=2.5)
# Directional Regression
b_hat_dr = dr(x=X, y=Y, nslices = 5, d=2, ytype = "continuous" )$beta
linearsdr:::ggplot_fsdr(Y, t((X)%*%b_hat_dr[,1]), y_on_axis=T,
ytype="continuous",
h_lab='DR 1', v_lab='Y',
main_lab= paste0('DR'), size=2.5)
# OPG Estimate
library("doParallel")
library("foreach")
print( paste( as.character(detectCores()), "cores detected" ) );
# Create cluster with desired number of cores
if ( !grepl("hxq5", getwd()) ) {
cl <- makePSOCKcluster(detectCores()-1)
} else if ( grepl("hxq5", getwd()) ) {
cl <- parallel::makeCluster(nprocs, type=mp_type)
}
# Register cluster
doParallel::registerDoParallel(cl)
# Find out how many cores are being used
print( paste( as.character(getDoParWorkers() ), "cores registered" ) )
# stopCluster(cl)
X_std=(sapply(1:dim(X)[2], FUN= function(j)
center_cpp(X[,j], NULL) ) )%*%matpower_cpp(cov((X)) , -1/2);
b_hat_opg = opcg(x=X_std, y=Y, bw = 5, d=2, ytype = "continuous",
method= "cg", parallelize = T )
linearsdr:::ggplot_fsdr(Y, t((X_std)%*%b_hat_opg[,1]), y_on_axis=T,
ytype="continuous",
h_lab='OPG 1', v_lab='OPG 2',
main_lab= paste0('OPG'), size=2.5)
Y
n
# MAVE Estimate
n=length(Y)
n
b_hat_made = made(x=t(X_std), matrix(Y, nrow = 1, ncol=n), bw=5, d=2,
ytype='continuous',
method=list(opcg="cg", made="cg"), B_mat = NULL,
parallelize=T,
control_list=list(print_iter=T) )
