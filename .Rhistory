![](../man/figures/ex3_mave2.png)
![](../man/figures/ex3_mave3.png)
```{r, fig.show="hold"}
# MAVE Estimate
roxygen2::roxygenise()
pkgdown::build_site()
pendigit_train_entire=as.data.frame(read.csv('data-raw/train.test', header = F, sep = ','))
pendigit_train_entire=as.data.frame(read.csv('data-raw/pendigits_tra', header = F, sep = ','))
pendigit_train_entire=as.data.frame(read.csv('data-raw/pendigits_tra.txt', header = F, sep = ','))
pendigit_train_all=as.data.frame(read.csv('data-raw/pendigits_tra.txt', header = F, sep = ','))
pendigit_test_all=as.data.frame(read.csv('data-raw/pendigits_tes.txt', header = F, sep = ','))
set.seed(2020)
pendigit_train_all=as.data.frame(read.csv('data-raw/pendigits_tra.txt', header = F, sep = ','))
pendigit_test_all=as.data.frame(read.csv('data-raw/pendigits_tes.txt', header = F, sep = ','))
train_set=sample(1:dim(pendigit_train)[1],1000) #1:dim(uspsdigit_train)[1];#
test_set=sample(1:dim(pendigit_test)[1],1000) #1:dim(uspsdigit_train)[1];#
pendigits_datta = rbind(pendigit_train_all[train_set,],
pendigit_test_all[test_set,] )
set.seed(2020)
pendigit_train_all=as.data.frame(read.csv('data-raw/pendigits_tra.txt', header = F, sep = ','))
pendigit_test_all=as.data.frame(read.csv('data-raw/pendigits_tes.txt', header = F, sep = ','))
train_set=sample(1:dim(pendigit_train)[1],1000) #1:dim(uspsdigit_train)[1];#
set.seed(2020)
pendigit_train_all=as.data.frame(read.csv('data-raw/pendigits_tra.txt', header = F, sep = ','))
pendigit_test_all=as.data.frame(read.csv('data-raw/pendigits_tes.txt', header = F, sep = ','))
train_set=sample(1:dim(pendigit_train_all[1],1000) #1:dim(uspsdigit_train)[1];#
pendigits_datta = rbind(pendigit_train_all[train_set,],
pendigit_test_all[test_set,] )
train_set=sample(1:dim(pendigit_train_all)[1],1000) #1:dim(uspsdigit_train)[1];#
test_set=sample(1:dim(pendigit_test_all)[1],1000) #1:dim(uspsdigit_train)[1];#
set.seed(2020)
pendigit_train_all=as.data.frame(read.csv('data-raw/pendigits_tra.txt', header = F, sep = ','))
pendigit_test_all=as.data.frame(read.csv('data-raw/pendigits_tes.txt', header = F, sep = ','))
train_set=sample(1:dim(pendigit_train_all)[1],1000) #1:dim(uspsdigit_train)[1];#
test_set=sample(1:dim(pendigit_test_all)[1],1000) #1:dim(uspsdigit_train)[1];#
pendigits_datta = rbind(pendigit_train_all[train_set,],
pendigit_test_all[test_set,] )
usethis::use_data(pendigits_datta, overwrite = TRUE)
set.seed(2020)
pendigit_train_all=as.data.frame(read.csv('data-raw/pendigits_tra.txt', header = F, sep = ','))
pendigit_test_all=as.data.frame(read.csv('data-raw/pendigits_tes.txt', header = F, sep = ','))
train_set=sample(1:dim(pendigit_train_all)[1],1000) #1:dim(uspsdigit_train)[1];#
test_set=sample(1:dim(pendigit_test_all)[1],1000) #1:dim(uspsdigit_train)[1];#
pendigits_datta = rbind(pendigit_train_all[train_set,],
pendigit_test_all[test_set,] )
usethis::use_data(pendigits_datta, overwrite = TRUE)
roxygen2::roxygenise()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
library(linearsdr)
library(ggplot2)
library("doParallel")
library("foreach")
# check number of cores available
# print( paste( as.character(detectCores()), "cores detected" ) );
# Create cluster with desired number of cores
cl <- makePSOCKcluster(detectCores()-1)
# Register cluster
doParallel::registerDoParallel(cl)
# Find out how many cores are being used
# print( paste( as.character(getDoParWorkers() ), "cores registered" ) )
data('pendigits_datta', package="linearsdr")
Y1 = c(pendigits_datta[1:1000,1])
Y1
X1 = as.matrix(pendigits_datta[1:1000,1:16])
Y1 = c(pendigits_datta[1:1000,17])
Y1
pairs(X1)
data('pendigits_datta', package="linearsdr")
X1 = as.matrix(pendigits_datta[1:1000,1:16])
Y1 = c(pendigits_datta[1:1000,17])
b_hat_sir1 = sir(x=X1, y=Y1, nslices = 5, d=2, ytype = "categorical" )$beta
b_hat_sir1 = sir(x=X1, y=Y1, nslices = 10, d=3, ytype = "categorical" )$beta
linearsdr:::ggplot_fsdr(Y1, t((X1)%*%b_hat_sir1[,1]), y_on_axis=T,
ytype="continuous",
h_lab='SIR 1', v_lab='Y',
main_lab= paste0('SIR'), size=2.5)
linearsdr:::ggplot_fsdr(Y1, t((X1)%*%b_hat_sir1[,1]), y_on_axis=F,
ytype="multinomial",
h_lab='SIR 1', v_lab='Y',
main_lab= paste0('SIR'), size=2.5)
linearsdr:::ggplot_fsdr(Y1, t((X1)%*%b_hat_sir1), y_on_axis=F,
ytype="multinomial",
h_lab='SIR 1', v_lab='Y',
main_lab= paste0('SIR'), size=2.5)
linearsdr:::ggplot_fsdr(Y1, t((X1)%*%b_hat_sir1[,1:2]), y_on_axis=F,
ytype="multinomial",
h_lab='SIR 1', v_lab='SIR2',
main_lab= paste0('SIR'), size=2.5)
linearsdr:::ggplot_fsdr(Y1, t((X1)%*%b_hat_sir1[,2:3]), y_on_axis=F,
ytype="multinomial",
h_lab='SIR 1', v_lab='SIR2',
main_lab= paste0('SIR'), size=2.5)
linearsdr:::ggplot_fsdr(Y1, t((X1)%*%b_hat_sir1[,c(1,3)]), y_on_axis=F,
ytype="multinomial",
h_lab='SIR 1', v_lab='SIR2',
main_lab= paste0('SIR'), size=2.5)
# Sliced Inverse Regression
b_hat_sir1 = sir(x=X1, y=Y1, nslices = 10, d=3, ytype = "categorical" )$beta
linearsdr:::ggplot_fsdr(Y1, t((X1)%*%b_hat_sir1[,c(1,2)]), y_on_axis=F,
ytype="multinomial",
h_lab='SIR 1', v_lab='SIR2',
main_lab= paste0('SIR'), size=2.5)
linearsdr:::ggplot_fsdr(Y1, t((X1)%*%b_hat_sir1[,c(2,3)]), y_on_axis=F,
ytype="multinomial",
h_lab='SIR 1', v_lab='SIR2',
main_lab= paste0('SIR'), size=2.5)
linearsdr:::ggplot_fsdr(Y1, t((X1)%*%b_hat_sir1[,c(1,3)]), y_on_axis=F,
ytype="multinomial",
h_lab='SIR 1', v_lab='SIR2',
main_lab= paste0('SIR'), size=2.5)
X1_test = as.matrix(pendigits_datta[1001:2000,1:16])
Y1_test = c(pendigits_datta[1001:2000,17])
# Sliced Inverse Regression
b_hat_sir1 = sir(x=X1, y=Y1, nslices = 10, d=9, ytype = "categorical" )$beta
linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_sir1[,c(1,2)]), y_on_axis=F,
ytype="multinomial",
h_lab='SIR 1', v_lab='SIR2',
main_lab= paste0('SIR'), size=2.5)
linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_sir1[,c(2,3)]), y_on_axis=F,
ytype="multinomial",
h_lab='SIR 1', v_lab='SIR2',
main_lab= paste0('SIR'), size=2.5)
linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_sir1[,c(1,3)]), y_on_axis=F,
ytype="multinomial",
h_lab='SIR 1', v_lab='SIR2',
main_lab= paste0('SIR'), size=2.5)
# Sliced Inverse Regression
b_hat_sir1 = sir(x=X1, y=Y1, nslices = 10, d=9, ytype = "categorical" )$beta
linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_sir1[,c(1,2)]), y_on_axis=F,
ytype="multinomial",
h_lab='SIR 1', v_lab='SIR2',
main_lab= paste0('SIR'), size=2.5)
linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_sir1[,c(2,3)]), y_on_axis=F,
ytype="multinomial",
h_lab='SIR 2', v_lab='SIR3',
main_lab= paste0('SIR'), size=2.5)
linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_sir1[,c(1,3)]), y_on_axis=F,
ytype="multinomial",
h_lab='SIR 1', v_lab='SIR3',
main_lab= paste0('SIR'), size=2.5)
b_hat_save1 = save_sdr(x=X1, y=Y1, nslices = 10, d=9, ytype = "categorical" )$beta
# Sliced Average Variance Estimator
b_hat_save1 = save_sdr(x=X1, y=Y1, nslices = 10, d=9, ytype = "categorical" )$beta
linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_save1[,c(1,2)]), y_on_axis=F,
ytype="multinomial",
h_lab='SAVE 1', v_lab='SAVE 2',
main_lab= paste0('SAVE'), size=2.5)
linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_save1[,c(2,3)]), y_on_axis=F,
ytype="multinomial",
h_lab='SAVE 2', v_lab='SAVE 3',
main_lab= paste0('SAVE'), size=2.5)
linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_save1[,c(1,3)]), y_on_axis=F,
ytype="multinomial",
h_lab='SAVE 1', v_lab='SAVE3',
main_lab= paste0('SAVE'), size=2.5)
# Directional Regression
b_hat_dr1 = dr(x=X1, y=Y1, nslices = 5, d=2, ytype = "continuous" )$beta
linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_dr1[,c(1,2)]), y_on_axis=F,
ytype="multinomial",
h_lab='DR 1', v_lab='DR 2',
main_lab= paste0('DR'), size=2.5)
linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_dr1[,c(2,3)]), y_on_axis=F,
ytype="multinomial",
h_lab='DR 2', v_lab='DR 3',
main_lab= paste0('DR'), size=2.5)
b_hat_dr1 = dr(x=X1, y=Y1, nslices = 10, d=9, ytype = "continuous" )$beta
# Directional Regression
b_hat_dr1 = dr(x=X1, y=Y1, nslices = 10, d=9, ytype = "categorical" )$beta
linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_dr1[,c(1,2)]), y_on_axis=F,
ytype="multinomial",
h_lab='DR 1', v_lab='DR 2',
main_lab= paste0('DR'), size=2.5)
linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_dr1[,c(2,3)]), y_on_axis=F,
ytype="multinomial",
h_lab='DR 2', v_lab='DR 3',
main_lab= paste0('DR'), size=2.5)
linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_dr1[,c(1,3)]), y_on_axis=F,
ytype="multinomial",
h_lab='DR 1', v_lab='DR 3',
main_lab= paste0('DR'), size=2.5)
X1_std=(sapply(1:dim(X1)[2], FUN= function(j)
center_cpp(X1[,j], NULL) ) )%*%matpower_cpp(cov((X1)) , -1/2);
X1_std=(sapply(1:dim(X1)[2], FUN= function(j)
center_cpp(X1[,j], NULL) ) )%*%matpower_cpp(cov((X1)) , -1/2);
b_hat_opg1 = opcg(x=X1_std, y=Y1, bw = 1.42, d=9, ytype = "cat",
method= "cg", parallelize = T )
b_hat_opcg1=b_hat_opg1
linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_opcg1[,c(1,2)]), y_on_axis=F,
ytype="multinomial",
h_lab='OPCG 1', v_lab='OPCG 2',
main_lab= paste0('OPCG'), size=2.5)
linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_opcg1[,c(2,3)]), y_on_axis=F,
ytype="multinomial",
h_lab='OPCG 2', v_lab='OPCG 3',
main_lab= paste0('OPCG'), size=2.5)
linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_opcg1[,c(1,3)]), y_on_axis=F,
ytype="multinomial",
h_lab='OPCG 1', v_lab='OPCG 3',
main_lab= paste0('OPCG'), size=2.5)
load('opcg_pendigit_made_est.Rdata')
load('C:/Users/Harri/Dropbox (Personal)/OPCG/Code/pendigit/opcg_pendigit_made_est.Rdata')
p_opcg = linearsdr:::ggplot_fsdr(Y, (t(tmp_opcg[,c(1,2)])%*%(X)), y_on_axis=F, ytype="multinomial",
h_lab='OPCG 1', v_lab='OPCG 2',
main_lab= paste('OPCG,', 'h=',as.character(bw)),
size=2, #y_colors = clas_col,  y_symbols = clas_symb,
ellipse = F)
p_opcg
p_opcg = linearsdr:::ggplot_fsdr(Y1, (t(tmp_opcg[,c(1,2)])%*%(X1)), y_on_axis=F, ytype="multinomial",
h_lab='OPCG 1', v_lab='OPCG 2',
main_lab= paste('OPCG,', 'h=',as.character(bw)),
size=2, #y_colors = clas_col,  y_symbols = clas_symb,
ellipse = F)
X1
p_opcg = linearsdr:::ggplot_fsdr(Y1, (t(tmp_opcg[,c(1,2)])%*%t(X1)), y_on_axis=F, ytype="multinomial",
h_lab='OPCG 1', v_lab='OPCG 2',
main_lab= paste('OPCG,', 'h=',as.character(bw)),
size=2, #y_colors = clas_col,  y_symbols = clas_symb,
ellipse = F)
linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%B_hat_opcg[,c(1,2)]), y_on_axis=F,
ytype="multinomial",
h_lab='OPCG 1', v_lab='OPCG 2',
main_lab= paste0('OPCG'), size=2.5)
linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%tmp_opcg[,c(1,2)]), y_on_axis=F,
ytype="multinomial",
h_lab='OPCG 1', v_lab='OPCG 2',
main_lab= paste0('OPCG'), size=2.5)
linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%B_hat_made[,c(1,2)]), y_on_axis=F,
ytype="multinomial",
h_lab='OPCG 1', v_lab='OPCG 2',
main_lab= paste0('OPCG'), size=2.5)
linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%B_hat_made[,c(1,3)]), y_on_axis=F,
ytype="multinomial",
h_lab='OPCG 1', v_lab='OPCG 2',
main_lab= paste0('OPCG'), size=2.5)
linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%B_hat_made[,c(2,3)]), y_on_axis=F,
ytype="multinomial",
h_lab='OPCG 1', v_lab='OPCG 2',
main_lab= paste0('OPCG'), size=2.5)
B_hat_made1=B_hat_made
linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%B_hat_made1[,c(1,2)]), y_on_axis=F,
ytype="multinomial",
h_lab='MADE 1', v_lab='MADE 2',
main_lab= paste0('MADE'), size=2.5)
linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%B_hat_made1[,c(2,3)]), y_on_axis=F,
ytype="multinomial",
h_lab='MADE 2', v_lab='MADE 3',
main_lab= paste0('MADE'), size=2.5)
linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%B_hat_made1[,c(1,3)]), y_on_axis=F,
ytype="multinomial",
h_lab='MADE 1', v_lab='MADE 3',
main_lab= paste0('MADE'), size=2.5)
# MAVE Estimate
# The code is commented out to speed up compiling of the documentation.
# n=length(Y1)
#
# start_time1 = Sys.time();
# B_hat_made1= made(X1, Y1, d=9, bw=1.42, lambda=0, B_mat=NULL,
#                   ytype="cat",
#                   method=list(opcg="cg", made="cg"), parallelize=T, r_mat=NULL,
#                   control_list = list(print_iter=T, max_iter_made=10, max_iter=10));
#
#
# end_time1 = Sys.time(); end_time1 - start_time1;
#
# # [1] "MADE: euc_dist dist is" "0.331801141953547"      "1"
# # [1] "MADE: euc_dist dist is" "0.0112107472862494"     "2"
# # [1] "MADE: euc_dist dist is" "0.0102038542211796"     "3"
# # [1] "MADE: euc_dist dist is" "0.00497290505768543"    "4"
# # [1] "MADE: euc_dist dist is" "0.00261423206170839"    "5"
# # [1] "0 - non-convergence"
# # Time difference of 22.35525 mins
#
#
linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%B_hat_made1[,c(1,2)]), y_on_axis=F,
ytype="multinomial",
h_lab='MADE 1', v_lab='MADE 2',
main_lab= paste0('MADE'), size=2.5)
linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%B_hat_made1[,c(2,3)]), y_on_axis=F,
ytype="multinomial",
h_lab='MADE 2', v_lab='MADE 3',
main_lab= paste0('MADE'), size=2.5)
linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%B_hat_made1[,c(1,3)]), y_on_axis=F,
ytype="multinomial",
h_lab='MADE 1', v_lab='MADE 3',
main_lab= paste0('MADE'), size=2.5)
#
# linearsdr:::save_sdr_plot(mave_plot1,filename = paste0('../man/figures/ex1_mave.png'),
#                           width = 900, height = 450, units = "px", pointsize = 12,
#                           bg = "white",  res = 100)
ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_opcg1[,c(1,2)]),
y_on_axis=F,
ytype="multinomial",
h_lab='OPCG 1', v_lab='OPCG 2',
main_lab= paste0('OPCG'), size=2.5)
opcg_plot1_2=linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_opcg1[,c(2,3)]),
y_on_axis=F,
ytype="multinomial",
h_lab='OPCG 2', v_lab='OPCG 3',
main_lab= paste0('OPCG'), size=2.5)
opcg_plot1_3=linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_opcg1[,c(1,3)]),
y_on_axis=F,
ytype="multinomial",
h_lab='OPCG 1', v_lab='OPCG 3',
main_la
linearsdr:::save_sdr_plot(opcg_plot1_1,
linearsdr:::save_sdr_plot(opcg_plot1_1,
filename = paste0('../man/figures/cat/ex1_opcg1.png'),
width = 900, height = 450, units = "px", pointsize = 12,
bg = "white",  res = 100)
opcg_plot1_1=linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_opcg1[,c(1,2)]),
y_on_axis=F,
ytype="multinomial",
h_lab='OPCG 1', v_lab='OPCG 2',
main_lab= paste0('OPCG'), size=2.5)
opcg_plot1_2=linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_opcg1[,c(2,3)]),
y_on_axis=F,
ytype="multinomial",
h_lab='OPCG 2', v_lab='OPCG 3',
main_lab= paste0('OPCG'), size=2.5)
opcg_plot1_3=linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_opcg1[,c(1,3)]),
y_on_axis=F,
ytype="multinomial",
h_lab='OPCG 1', v_lab='OPCG 3',
main_lab= paste0('OPCG'), size=2.5)
linearsdr:::save_sdr_plot(opcg_plot1_1,
filename = paste0('../man/figures/cat/ex1_opcg1.png'),
width = 900, height = 450, units = "px", pointsize = 12,
bg = "white",  res = 100)
linearsdr:::save_sdr_plot(opcg_plot1_2,
filename = paste0('../man/figures/cat/ex1_opcg2.png'),
width = 900, height = 450, units = "px", pointsize = 12,
bg = "white",  res = 100)
linearsdr:::save_sdr_plot(opcg_plot1_3,
filename = paste0('../man/figures/cat/ex1_opcg3.png'),
width = 900, height = 450, units = "px", pointsize = 12,
bg = "white",  res = 100)
#                                       ytype="multinomial",
#                                       h_lab='OPCG 2', v_lab='OPCG 3',
#                                       main_lab= paste0('OPCG'), size=2.5)
#
# opcg_plot1_3=linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_opcg1[,c(1,3)]),
#                                      y_on_axis=F,
#                                       ytype="multinomial",
#                                       h_lab='OPCG 1', v_lab='OPCG 3',
#                                       main_lab= paste0('OPCG'), size=2.5)
#
linearsdr:::save_sdr_plot(opcg_plot1_3,
filename = paste0('../man/figures/cat/ex1_opcg3.png'),
width = 900, height = 450, units = "px", pointsize = 12,
bg = "white",  res = 150)
#                                       ytype="multinomial",
#                                       h_lab='OPCG 2', v_lab='OPCG 3',
#                                       main_lab= paste0('OPCG'), size=2.5)
#
# opcg_plot1_3=linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_opcg1[,c(1,3)]),
#                                      y_on_axis=F,
#                                       ytype="multinomial",
#                                       h_lab='OPCG 1', v_lab='OPCG 3',
#                                       main_lab= paste0('OPCG'), size=2.5)
#
linearsdr:::save_sdr_plot(opcg_plot1_2,
filename = paste0('../man/figures/cat/ex1_opcg2.png'),
width = 900, height = 450, units = "px", pointsize = 12,
bg = "white",  res = 150)
#                                       ytype="multinomial",
#                                       h_lab='OPCG 2', v_lab='OPCG 3',
#                                       main_lab= paste0('OPCG'), size=2.5)
#
# opcg_plot1_3=linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_opcg1[,c(1,3)]),
#                                      y_on_axis=F,
#                                       ytype="multinomial",
#                                       h_lab='OPCG 1', v_lab='OPCG 3',
#                                       main_lab= paste0('OPCG'), size=2.5)
#
linearsdr:::save_sdr_plot(opcg_plot1_1,
filename = paste0('../man/figures/cat/ex1_opcg1.png'),
width = 900, height = 450, units = "px", pointsize = 12,
bg = "white",  res = 150)
#                                       ytype="multinomial",
#                                       h_lab='OPCG 2', v_lab='OPCG 3',
#                                       main_lab= paste0('OPCG'), size=2.5)
#
# opcg_plot1_3=linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_opcg1[,c(1,3)]),
#                                      y_on_axis=F,
#                                       ytype="multinomial",
#                                       h_lab='OPCG 1', v_lab='OPCG 3',
#                                       main_lab= paste0('OPCG'), size=2.5)
#
linearsdr:::save_sdr_plot(opcg_plot1_1,
filename = paste0('../man/figures/cat/ex1_opcg1.png'),
width = 800, height = 450, units = "px", pointsize = 12,
bg = "white",  res = 150)
#                                       ytype="multinomial",
#                                       h_lab='OPCG 2', v_lab='OPCG 3',
#                                       main_lab= paste0('OPCG'), size=2.5)
#
# opcg_plot1_3=linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_opcg1[,c(1,3)]),
#                                      y_on_axis=F,
#                                       ytype="multinomial",
#                                       h_lab='OPCG 1', v_lab='OPCG 3',
#                                       main_lab= paste0('OPCG'), size=2.5)
#
linearsdr:::save_sdr_plot(opcg_plot1_2,
filename = paste0('../man/figures/cat/ex1_opcg2.png'),
width = 800, height = 450, units = "px", pointsize = 12,
bg = "white",  res = 150)
#                                       ytype="multinomial",
#                                       h_lab='OPCG 2', v_lab='OPCG 3',
#                                       main_lab= paste0('OPCG'), size=2.5)
#
# opcg_plot1_3=linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_opcg1[,c(1,3)]),
#                                      y_on_axis=F,
#                                       ytype="multinomial",
#                                       h_lab='OPCG 1', v_lab='OPCG 3',
#                                       main_lab= paste0('OPCG'), size=2.5)
#
linearsdr:::save_sdr_plot(opcg_plot1_3,
filename = paste0('../man/figures/cat/ex1_opcg3.png'),
width = 800, height = 450, units = "px", pointsize = 12,
bg = "white",  res = 150)
made_plot1_1=linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_made1[,c(1,2)]),
y_on_axis=F,
ytype="multinomial",
h_lab='MADE 1', v_lab='MADE 2',
main_lab= paste0('MADE'), size=2.5)
b_hat_made1 = b_hat_made
load('C:/Users/Harri/Dropbox (Personal)/OPCG/Code/pendigit/opcg_pendigit_made_est.Rdata')
b_hat_made1 = b_hat_made
load('C:/Users/Harri/Dropbox (Personal)/OPCG/Code/pendigit/opcg_pendigit_made_est.Rdata')
load('C:/Users/Harri/Dropbox (Personal)/OPCG/Code/pendigit/opcg_pendigit_made_est10_10.Rdata')
load('C:/Users/Harri/Dropbox (Personal)/OPCG/Code/pendigit/opcg_pendigit_made_est10_10.Rdata')
B_hat_made
linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%B_hat_made[,c(2,3)]), y_on_axis=F,
ytype="multinomial",
h_lab='OPCG 1', v_lab='OPCG 2',
main_lab= paste0('OPCG'), size=2.5)
b_hat_made1 = b_hat_made
b_hat_made1 = B_hat_made
made_plot1_1=linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_made1[,c(1,2)]),
y_on_axis=F,
ytype="multinomial",
h_lab='MADE 1', v_lab='MADE 2',
main_lab= paste0('MADE'), size=2.5)
made_plot1_2=linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_made1[,c(2,3)]),
y_on_axis=F,
ytype="multinomial",
h_lab='MADE 2', v_lab='MADE 3',
main_lab= paste0('MADE'), size=2.5)
made_plot1_3=linearsdr:::ggplot_fsdr(Y1_test, t((X1_test)%*%b_hat_made1[,c(1,3)]),
y_on_axis=F,
ytype="multinomial",
h_lab='MADE 1', v_lab='MADE 3',
main_lab= paste0('MADE'), size=2.5)
linearsdr:::save_sdr_plot(made_plot1_3,
filename = paste0('../man/figures/cat/ex1_made3.png'),
width = 800, height = 450, units = "px", pointsize = 12,
bg = "white",  res = 150)
linearsdr:::save_sdr_plot(made_plot1_2,
filename = paste0('../man/figures/cat/ex1_made2.png'),
width = 800, height = 450, units = "px", pointsize = 12,
bg = "white",  res = 150)
linearsdr:::save_sdr_plot(made_plot1_1,
filename = paste0('../man/figures/cat/ex1_made1.png'),
width = 800, height = 450, units = "px", pointsize = 12,
bg = "white",  res = 150)
roxygen2::roxygenise()
pkgdown::build_site()
## code to prepare datasets goes here
set.seed(2021)
#### NASA Airfoil Dataset ----
airfoil_datta = read.table("data-raw/airfoil_self_noise.dat", header=F, skip=0)
sample_set = sample(1:dim(airfoil_datta)[1], 500)
airfoil_datta = airfoil_datta[sample_set,]
usethis::use_data(airfoil_datta, overwrite = TRUE)
#### Energy Efficiency Dataset ----
# Bivariate Y
energy_datta = readxl::read_xlsx("data-raw/ENB2012_data.xlsx")
usethis::use_data(energy_datta, overwrite = TRUE)
#### Superconductor Dataset ----
supercond_datta_entire = read.csv2("data-raw/superconductor.csv", header = T, sep=",")
dim(supercond_datta_entire)
sample_set = sample(1:dim(supercond_datta_entire)[1], 500)
supercond_datta = supercond_datta_entire[sample_set,]
supercond_datta = sapply(1:dim(supercond_datta)[2],
function(k) as.numeric(supercond_datta[,k]))
usethis::use_data(supercond_datta, overwrite = TRUE)
#### Communities and Crime Dataset ----
crime_datta_entire=as.data.frame(read.csv('data-raw/communities.data', header = F, sep = ','))
# dim(crime_datta_entire)
# Drop first 5; drop NA; 102-118, 122-125, 127
crime_datta = crime_datta_entire[,-c(1:5, 31,102:118, 122:125, 127)]
sample_set = sample(1:dim(crime_datta)[1], 500)
crime_datta = crime_datta[sample_set,]
crime_datta = sapply(1:dim(crime_datta)[2],
function(k) as.numeric(crime_datta[,k]))
usethis::use_data(crime_datta, overwrite = TRUE)
#### Pen digit ----
set.seed(2020)
pendigit_train_all=as.data.frame(read.csv('data-raw/pendigits_tra.txt', header = F, sep = ','))
pendigit_test_all=as.data.frame(read.csv('data-raw/pendigits_tes.txt', header = F, sep = ','))
train_set=sample(1:dim(pendigit_train_all)[1],1000) #1:dim(uspsdigit_train)[1];#
test_set=sample(1:dim(pendigit_test_all)[1],1000) #1:dim(uspsdigit_train)[1];#
pendigits_datta = rbind(pendigit_train_all[train_set,],
pendigit_test_all[test_set,] )
usethis::use_data(pendigits_datta, overwrite = TRUE)
pkgdown::build_site()
library(linearsdr)
detach("package:linearsdr", unload = TRUE)
pkgdown::build_site()
devtools::install_github("HarrisQ/linearsdr");
