usethis::use_pkgdown()
usethis::use_pkgdown()
build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
usethis::use_description()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
..Las.Last.error.trace
.Last.Last.error.trace
.Last.error.trace
pkgdown::build_site()
pkgdown::build_site()
.Last.error.trace
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
warnings()
warnings()
pkgdown::build_site()
pkgdown::build_site()
warnings()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
library(linearsdr)
detach("package:linearsdr", unload = TRUE)
pkgdown::build_site()
warnings()
roxygen2::roxygenise()
roxygen2::roxygenise()
pkgdown::build_site()
library(linearsdr)
detach("package:linearsdr", unload = TRUE)
pkgdown::build_site()
vignette("pkgdown")
library(pkgdown)
vignette("pkgdown")
pkgdown::build_site()
pkgdown::build_site()
detach("package:pkgdown", unload = TRUE)
library(linearsdr)
detach("package:linearsdr", unload = TRUE)
detach("package:linearsdr", unload = TRUE)
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_home()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
## Installation
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
library(linearsdr)
detach("package:linearsdr", unload = TRUE)
remove.packages("linearsdr0", lib="~/R/win-library/4.0")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::init_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
knitr::opts_chunk$set(echo = TRUE)
summary(cars)
cars
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
roxygen2::roxygenise()
pkgdown::build_site()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
pkgdown::build_site()
pkgdown::build_site()
usethis::use_rcpp()
roxygen2::roxygenise()
usethis::use_rcpp()
roxygen2::roxygenise()
usethis::use_rcpp()
usethis::use_rcpp()
roxygen2::roxygenise()
usethis::use_rcpp()
usethis::use_rcpp()
roxygen2::roxygenise()
pkgdown::build_site()
usethis::use_pkgdown()
pkgdown::build_site()
usethis::use_pkgdown()
roxygen2::roxygenise()
usethis::use_rcpp()
roxygen2::roxygenise()
usethis::use_rcpp()
pkgdown::build_site()
usethis::use_rcpp()
usethis::use_rcpp()
roxygen2::upgradeRoxygen()
roxygen2::upgradeRoxygen()
install.packages("roxygen2")
roxygen2::upgradeRoxygen()
usethis::use_rcpp()
roxygen2::roxygenise()
roxygen2::roxygenise()
pkgdown::build_site()
use_data_raw()
usethis::use_data_raw()
read.table("airfoil_self_noise",header=F, skip=0)
getwd()
read.table("../data-raw/airfoil_self_noise", header=F, skip=0)
read.table("/data-raw/airfoil_self_noise", header=F, skip=0)
read.table("data-raw/airfoil_self_noise", header=F, skip=0)
read.table("data-raw/airfoil_self_noise.dat", header=F, skip=0)
airfoil_datta = read.table("data-raw/airfoil_self_noise.dat", header=F, skip=0)
usethis::use_data(airfoil_datta, overwrite = TRUE)
usethis::use_vignette("sdr_airfoil")
library(linearsdr)
View(airfoil_datta)
X = airfoil_datta[,1:5]
Y = airfoil_datta[,6]
Y
dr(x=X, y=Y, nslices = 5, d=2 )
dr(x=X, y=Y, nslices = 5, d=2, ytype = "continuous" )
b_hat_dr = dr(x=X, y=Y, nslices = 5, d=2, ytype = "continuous" )$beta
b_hat_dr
plot(t(b_hat_dr%*%t(X)), Y)
t(b_hat_dr%*%t(X))[,1]
t(b_hat_dr%*%t(X))
b_hat_dr%*%t(X)
b_hat_dr
X
(X)%*%b_hat_dr
X
dim(X)
(X)%*%b_hat_dr
X = as.matrix(airfoil_datta[,1:5])
X
Y = c(airfoil_datta[,6])
dim(X)
b_hat_dr = dr(x=X, y=Y, nslices = 5, d=2, ytype = "continuous" )$beta
plot(t((X)%*%b_hat_dr)[,1], Y)
(X)%*%b_hat_dr
Y
plot( ((X)%*%b_hat_dr)[,1], Y)
plot( ((X)%*%b_hat_dr)[,2], Y)
plot( ((X)%*%b_hat_dr)[,1], ((X)%*%b_hat_dr)[,2])
plot( ((X)%*%b_hat_dr)[,1], ((X)%*%b_hat_dr)[,2], col=Y)
plot( ((X)%*%b_hat_dr)[,1], Y, col=Y)
plot( ((X)%*%b_hat_dr)[,2], Y, col=Y)
Y
plot( ((X)%*%b_hat_dr)[,1], Y, col=Y)
levels(Y)
table(Y)
ggplot_fsdr <- function(y_datta, x_datta, y_on_axis=F, ytype="multinomial",
size=1, h_lim=NULL, v_lim=NULL,
h_lab=NULL, v_lab=NULL, main_lab=NULL,
show_legend=T,
y_colors=NULL, y_symbols=NULL,
ellipse=F
) {
# y_datta=Y; x_datta=t( B_hat_opcg )%*%(X);
# y_on_axis=F; ytype="continuous";#"multinomial";
# size=1; h_lab=NULL; v_lab=NULL; main_lab=NULL;
# show_legend=T; h_lim=NULL; v_lin=NULL;
# y_colors=NULL; y_symbols=NULL
# ellipse=T;
# y_datta=Y; x_datta=t( B_hat_opcg )%*%(X);
# y_on_axis=F; ytype="continuous";#"multinomial";
# size=1; h_lab=NULL; v_lab=NULL; main_lab=NULL;
# show_legend=T; h_lim=NULL; v_lin=NULL;
# y_colors=NULL; y_symbols=NULL
# ellipse=T;
datta_frame0 <- data.frame( t( rbind(y_datta, x_datta) ));
colnames(datta_frame0) <- c('y',
sapply(1:(dim(datta_frame0)[2]-1),
function(k) paste0('x',k) ));
p_base = ggplot2::ggplot(datta_frame0);
if(!is.null(h_lim) ) p_base = p_base + xlim(h_lim[1], h_lim[2]);
if(!is.null(v_lim) ) p_base = p_base + ylim(v_lim[1], v_lim[2]);
if( ytype=="multinomial" ) {
# Colours for discrete Y
if(!is.null(y_colors)) {
p_base = p_base + ggplot2::scale_colour_manual(values = y_colors)
}
# Shapes for Discrete Y
if(!is.null(y_symbols)) {
p_base = p_base + ggplot2::scale_shape_manual(values = y_symbols)
} else {
p_base = p_base + ggplot2::scale_shape_manual(values = rep(16,
length(levels(factor(datta_frame0$y)))
))
}
# Add points
if(!y_on_axis) { # Don't plot Y
# Draw Ellipse
if(ellipse) {
pplot = p_base +
ggplot2::stat_ellipse(aes(x=x1, y=x2, color = factor(y), group=factor(y)),
type="norm", lwd=2, lty=2) #
} else {
pplot = p_base +
ggplot2::geom_point(aes(x=x1, y=x2, color = factor(y), shape=factor(y)),
size=size, show.legend=show_legend );
}
} else {
# Plot Y
pplot = p_base +
ggplot2::geom_point(aes(x=x1, y=y, color = factor(y), shape=factor(y)),
size=size, show.legend=show_legend  )
}
} else if (ytype=="continuous") {
# Colours for continuous Y
if(!is.null(y_colors)) {
p_base = p_base + ggplot2::scale_colour_manual(values = y_colors)
}
# Shapes for continuous Y
if(!is.null(y_symbols)) {
p_base = p_base + ggplot2::scale_shape_manual(values = y_symbols)
} else {
p_base = p_base + ggplot2::scale_shape_manual(values = rep(16,
length(levels(factor(datta_frame0$y)))
))
}
# Add points
if(!y_on_axis) { # Don't plot Y
# Draw Ellipse
if(ellipse) {
pplot = p_base +
ggplot2::stat_ellipse(aes(x=x1, y=x2, color = factor(y), group=factor(y)),
type="norm")
} else {
pplot = p_base +
ggplot2::geom_point(aes(x=x1, y=x2, color = y),
size=size, show.legend=show_legend  )
}
} else { # Plot Y
# Draw Ellipse
if(ellipse) {
pplot = p_base +
ggplot2::stat_ellipse(aes(x=x1, y=y, color = factor(y), group=factor(y)),
type="norm")
} else {
pplot = p_base +
ggplot2::geom_point(aes(x=x1, y=y, color = y),
size=size, show.legend=show_legend  )
}
}
}
pplot + ggplot2::labs(title = main_lab, x = h_lab, y = v_lab ) +
ggplot2::theme(legend.position="none",
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
panel.background = element_blank(),
axis.line = element_line(colour = "black"))
}
ggplot_fsdr(Y, ((X)%*%b_hat_dr)[,1], y_on_axis=F, ytype="continuous",
h_lab='MADE 1', v_lab='MADE 2',
main_lab= paste0('MADE, ', 'h=', as.character(bw)),
size=3, y_colors = clas_col,  y_symbols = clas_symb)
ggplot_fsdr(Y, ((X)%*%b_hat_dr)[,1], y_on_axis=F, ytype="continuous",
h_lab='MADE 1', v_lab='MADE 2',
main_lab= paste0('MADE, ', 'h=', as.character(bw)),
size=3)
library(ggplot2)
ggplot_fsdr(Y, ((X)%*%b_hat_dr)[,1], y_on_axis=F, ytype="continuous",
h_lab='MADE 1', v_lab='MADE 2',
main_lab= paste0('MADE, ', 'h=', as.character(bw)),
size=3)
ggplot_fsdr(Y, ((X)%*%b_hat_dr)[,1], y_on_axis=F, ytype="continuous",
h_lab='MADE 1', v_lab='MADE 2',
main_lab= paste0('DR'),
size=3)
ggplot_fsdr(Y, ((X)%*%b_hat_dr), y_on_axis=F, ytype="continuous",
h_lab='MADE 1', v_lab='MADE 2',
main_lab= paste0('DR'),
size=3)
((X)%*%b_hat_dr)
ggplot_fsdr(Y, ((X)%*%b_hat_dr), y_on_axis=T, ytype="continuous",
h_lab='MADE 1', v_lab='MADE 2',
main_lab= paste0('DR'),
size=3)
ggplot_fsdr(Y, t((X)%*%b_hat_dr), y_on_axis=T, ytype="continuous",
h_lab='MADE 1', v_lab='MADE 2',
main_lab= paste0('DR'),
size=3)
ggplot_fsdr(Y, t((X)%*%b_hat_dr), y_on_axis=F, ytype="continuous",
h_lab='MADE 1', v_lab='MADE 2',
main_lab= paste0('DR'),
size=3)
b_hat_sir = sir(x=X, y=Y, nslices = 5, d=2, ytype = "continuous" )$beta
ggplot_fsdr(Y, t((X)%*%b_hat_sir), y_on_axis=F, ytype="continuous",
h_lab='MADE 1', v_lab='MADE 2',
main_lab= paste0('DR'), size=3)
ggplot_fsdr(Y, t((X)%*%b_hat_sir), y_on_axis=F, ytype="continuous",
h_lab='MADE 1', v_lab='MADE 2',
main_lab= paste0('DR'), size=3)
ggplot_fsdr(Y, t((X)%*%b_hat_sir), y_on_axis=F, ytype="continuous",
h_lab='SIR 1', v_lab='SIR 2',
main_lab= paste0('SIR'), size=3)
ggplot_fsdr(Y, t((X)%*%b_hat_sir), y_on_axis=T, ytype="continuous",
h_lab='SIR 1', v_lab='SIR 2',
main_lab= paste0('SIR'), size=3)
library("doParallel")
library("foreach")
print( paste( as.character(detectCores()), "cores detected" ) );
# Create cluster with desired number of cores
if ( !grepl("hxq5", getwd()) ) {
cl <- makePSOCKcluster(detectCores()-1)
} else if ( grepl("hxq5", getwd()) ) {
cl <- parallel::makeCluster(nprocs, type=mp_type)
}
# Register cluster
doParallel::registerDoParallel(cl)
# Find out how many cores are being used
print( paste( as.character(getDoParWorkers() ), "cores registered" ) )
b_hat_opg = opcg(x=X, y=Y, bw = 1, d=2, ytype = "continuous", parallelize = T )$beta
b_hat_opg = opcg(x=X, y=Y, bw = 1, d=2, ytype = "continuous",
method= "cg", parallelize = T )
stopCluster(cl)
print( paste( as.character(detectCores()), "cores detected" ) );
# Create cluster with desired number of cores
if ( !grepl("hxq5", getwd()) ) {
cl <- makePSOCKcluster(detectCores()-1)
} else if ( grepl("hxq5", getwd()) ) {
cl <- parallel::makeCluster(nprocs, type=mp_type)
}
# Register cluster
doParallel::registerDoParallel(cl)
# Find out how many cores are being used
print( paste( as.character(getDoParWorkers() ), "cores registered" ) )
b_hat_opg = opcg(x=X, y=Y, bw = 1, d=2, ytype = "continuous",
method= "cg", parallelize = T )
ggplot_fsdr(Y, t((X)%*%b_hat_dr), y_on_axis=F, ytype="continuous",
h_lab='DR 1', v_lab='DR 2',
main_lab= paste0('DR'), size=3)
ggplot_fsdr(Y, t((X)%*%b_hat_opg), y_on_axis=F, ytype="continuous",
h_lab='DR 1', v_lab='DR 2',
main_lab= paste0('DR'), size=3)
ggplot_fsdr(Y, t((X)%*%b_hat_opg), y_on_axis=T, ytype="continuous",
h_lab='DR 1', v_lab='DR 2',
main_lab= paste0('DR'), size=3)
ggplot_fsdr(Y, t((X)%*%b_hat_opg), y_on_axis=F, ytype="continuous",
h_lab='DR 1', v_lab='DR 2',
main_lab= paste0('DR'), size=3)
b_hat_opg = opcg(x=X, y=Y, bw = 2, d=2, ytype = "continuous",
method= "cg", parallelize = T )
ggplot_fsdr(Y, t((X)%*%b_hat_opg), y_on_axis=F, ytype="continuous",
h_lab='OPG 1', v_lab='OPG 2',
main_lab= paste0('DR'), size=3)
ggplot_fsdr(Y, t((X)%*%b_hat_opg), y_on_axis=T, ytype="continuous",
h_lab='OPG 1', v_lab='OPG 2',
main_lab= paste0('DR'), size=3)
ggplot_fsdr(Y, t((X)%*%b_hat_opg)[,2], y_on_axis=T, ytype="continuous",
h_lab='OPG 1', v_lab='OPG 2',
main_lab= paste0('DR'), size=3)
ggplot_fsdr(Y, t((X)%*%b_hat_opg)[2,], y_on_axis=T, ytype="continuous",
h_lab='OPG 1', v_lab='OPG 2',
main_lab= paste0('DR'), size=3)
ggplot_fsdr(Y, t((X)%*%b_hat_opg)[1,], y_on_axis=T, ytype="continuous",
h_lab='OPG 1', v_lab='OPG 2',
main_lab= paste0('DR'), size=3)
ggplot_fsdr(Y, t((X)%*%b_hat_opg)[1:2,], y_on_axis=F, ytype="continuous",
h_lab='OPG 1', v_lab='OPG 2',
main_lab= paste0('DR'), size=3)
roxygen2::roxygenise()
rm(list = c("ggplot_fsdr"))
library(linearsdr)
ggplot_fsdr(Y, t((X)%*%b_hat_dr), y_on_axis=F, ytype="continuous",
h_lab='DR 1', v_lab='DR 2',
main_lab= paste0('DR'), size=3)
roxygen2::roxygenise()
pkgdown::build_site()
pkgdown::build_site()
library(linearsdr)
library(linearsdr)
library(linearsdr)
library(ggplot2)
